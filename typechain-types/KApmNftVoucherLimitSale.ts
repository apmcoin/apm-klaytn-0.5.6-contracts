/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface KApmNftVoucherLimitSaleInterface extends utils.Interface {
  functions: {
    "feeTo()": FunctionFragment;
    "nftVoucher()": FunctionFragment;
    "tokenId()": FunctionFragment;
    "setUsingWhitelist(bool)": FunctionFragment;
    "removeWhitelist(address[])": FunctionFragment;
    "addManager(address)": FunctionFragment;
    "saleDescription()": FunctionFragment;
    "setApmCoin(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "usingWhitelist()": FunctionFragment;
    "saleLimit()": FunctionFragment;
    "apmPerNft()": FunctionFragment;
    "saleName()": FunctionFragment;
    "owner()": FunctionFragment;
    "isOwner()": FunctionFragment;
    "buyLimitPerAddress(address)": FunctionFragment;
    "saleCount()": FunctionFragment;
    "setBuyLimitPerAddress(address[],uint256[])": FunctionFragment;
    "setSaleName(string)": FunctionFragment;
    "buyAndRedeem(uint256,uint256,string)": FunctionFragment;
    "setNftVoucher(address)": FunctionFragment;
    "isWhitelist(address)": FunctionFragment;
    "setTokenId(uint256)": FunctionFragment;
    "setApmPerNft(uint256)": FunctionFragment;
    "apmCoin()": FunctionFragment;
    "buy(uint256,uint256)": FunctionFragment;
    "setSaleLimit(uint256)": FunctionFragment;
    "step()": FunctionFragment;
    "addWhitelist(address[])": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "isManager(address)": FunctionFragment;
    "setFeeTo(address)": FunctionFragment;
    "renounceManager()": FunctionFragment;
    "setStep(uint256)": FunctionFragment;
    "setSaleDescription(string)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "nftVoucher",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "tokenId", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setUsingWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "removeWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "addManager", values: [string]): string;
  encodeFunctionData(
    functionFragment: "saleDescription",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setApmCoin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "usingWhitelist",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "saleLimit", values?: undefined): string;
  encodeFunctionData(functionFragment: "apmPerNft", values?: undefined): string;
  encodeFunctionData(functionFragment: "saleName", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "isOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buyLimitPerAddress",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "saleCount", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBuyLimitPerAddress",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "setSaleName", values: [string]): string;
  encodeFunctionData(
    functionFragment: "buyAndRedeem",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftVoucher",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isWhitelist", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setTokenId",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApmPerNft",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "apmCoin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "buy",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "step", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addWhitelist",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isManager", values: [string]): string;
  encodeFunctionData(functionFragment: "setFeeTo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "renounceManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setSaleDescription",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "nftVoucher", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUsingWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addManager", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "saleDescription",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setApmCoin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "usingWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleLimit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "apmPerNft", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "saleName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyLimitPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "saleCount", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setBuyLimitPerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setSaleName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyAndRedeem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setTokenId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApmPerNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "apmCoin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSaleLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "step", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isManager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFeeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setSaleDescription",
    data: BytesLike
  ): Result;

  events: {
    "SetApmCoin(address)": EventFragment;
    "SetNftVoucher(address)": EventFragment;
    "SetFeeTo(address)": EventFragment;
    "SetTokenId(uint256)": EventFragment;
    "SetApmPerNft(uint256)": EventFragment;
    "SetStep(uint256)": EventFragment;
    "SetSaleLimit(uint256)": EventFragment;
    "SetSaleName(string)": EventFragment;
    "SetSaleDescription(string)": EventFragment;
    "SetUsingWhitelist(bool)": EventFragment;
    "ManagerAdded(address)": EventFragment;
    "ManagerRemoved(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetApmCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftVoucher"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApmPerNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStep"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSaleLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSaleName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSaleDescription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUsingWhitelist"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ManagerRemoved"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type SetApmCoinEvent = TypedEvent<[string], { apmCoinAddress: string }>;

export type SetApmCoinEventFilter = TypedEventFilter<SetApmCoinEvent>;

export type SetNftVoucherEvent = TypedEvent<
  [string],
  { apmCoinAddress: string }
>;

export type SetNftVoucherEventFilter = TypedEventFilter<SetNftVoucherEvent>;

export type SetFeeToEvent = TypedEvent<[string], { feeTo: string }>;

export type SetFeeToEventFilter = TypedEventFilter<SetFeeToEvent>;

export type SetTokenIdEvent = TypedEvent<[BigNumber], { tokenId: BigNumber }>;

export type SetTokenIdEventFilter = TypedEventFilter<SetTokenIdEvent>;

export type SetApmPerNftEvent = TypedEvent<
  [BigNumber],
  { apmPerNft: BigNumber }
>;

export type SetApmPerNftEventFilter = TypedEventFilter<SetApmPerNftEvent>;

export type SetStepEvent = TypedEvent<[BigNumber], { step: BigNumber }>;

export type SetStepEventFilter = TypedEventFilter<SetStepEvent>;

export type SetSaleLimitEvent = TypedEvent<[BigNumber], { step: BigNumber }>;

export type SetSaleLimitEventFilter = TypedEventFilter<SetSaleLimitEvent>;

export type SetSaleNameEvent = TypedEvent<[string], { saleName: string }>;

export type SetSaleNameEventFilter = TypedEventFilter<SetSaleNameEvent>;

export type SetSaleDescriptionEvent = TypedEvent<
  [string],
  { saleDescription: string }
>;

export type SetSaleDescriptionEventFilter =
  TypedEventFilter<SetSaleDescriptionEvent>;

export type SetUsingWhitelistEvent = TypedEvent<
  [boolean],
  { usingWhitelist: boolean }
>;

export type SetUsingWhitelistEventFilter =
  TypedEventFilter<SetUsingWhitelistEvent>;

export type ManagerAddedEvent = TypedEvent<[string], { account: string }>;

export type ManagerAddedEventFilter = TypedEventFilter<ManagerAddedEvent>;

export type ManagerRemovedEvent = TypedEvent<[string], { account: string }>;

export type ManagerRemovedEventFilter = TypedEventFilter<ManagerRemovedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface KApmNftVoucherLimitSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: KApmNftVoucherLimitSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    feeTo(overrides?: CallOverrides): Promise<[string]>;

    nftVoucher(overrides?: CallOverrides): Promise<[string]>;

    tokenId(overrides?: CallOverrides): Promise<[BigNumber]>;

    setUsingWhitelist(
      _usingWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeWhitelist(
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    saleDescription(overrides?: CallOverrides): Promise<[string]>;

    setApmCoin(
      _apmCoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    usingWhitelist(overrides?: CallOverrides): Promise<[boolean]>;

    saleLimit(overrides?: CallOverrides): Promise<[BigNumber]>;

    apmPerNft(overrides?: CallOverrides): Promise<[BigNumber]>;

    saleName(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    isOwner(overrides?: CallOverrides): Promise<[boolean]>;

    buyLimitPerAddress(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    saleCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    setBuyLimitPerAddress(
      wallets: string[],
      buyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleName(
      _saleName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyAndRedeem(
      _buyCount: BigNumberish,
      _apmAmount: BigNumberish,
      _userUuid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setNftVoucher(
      _nftVoucher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isWhitelist(wallet: string, overrides?: CallOverrides): Promise<[boolean]>;

    setTokenId(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApmPerNft(
      _apmPerNft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    apmCoin(overrides?: CallOverrides): Promise<[string]>;

    buy(
      _buyCount: BigNumberish,
      _apmAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleLimit(
      _saleLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    step(overrides?: CallOverrides): Promise<[BigNumber]>;

    addWhitelist(
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isManager(account: string, overrides?: CallOverrides): Promise<[boolean]>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setSaleDescription(
      _saleDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  feeTo(overrides?: CallOverrides): Promise<string>;

  nftVoucher(overrides?: CallOverrides): Promise<string>;

  tokenId(overrides?: CallOverrides): Promise<BigNumber>;

  setUsingWhitelist(
    _usingWhitelist: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeWhitelist(
    wallets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  addManager(
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  saleDescription(overrides?: CallOverrides): Promise<string>;

  setApmCoin(
    _apmCoin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  usingWhitelist(overrides?: CallOverrides): Promise<boolean>;

  saleLimit(overrides?: CallOverrides): Promise<BigNumber>;

  apmPerNft(overrides?: CallOverrides): Promise<BigNumber>;

  saleName(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  isOwner(overrides?: CallOverrides): Promise<boolean>;

  buyLimitPerAddress(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  saleCount(overrides?: CallOverrides): Promise<BigNumber>;

  setBuyLimitPerAddress(
    wallets: string[],
    buyLimits: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleName(
    _saleName: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyAndRedeem(
    _buyCount: BigNumberish,
    _apmAmount: BigNumberish,
    _userUuid: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setNftVoucher(
    _nftVoucher: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isWhitelist(wallet: string, overrides?: CallOverrides): Promise<boolean>;

  setTokenId(
    _tokenId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApmPerNft(
    _apmPerNft: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  apmCoin(overrides?: CallOverrides): Promise<string>;

  buy(
    _buyCount: BigNumberish,
    _apmAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleLimit(
    _saleLimit: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  step(overrides?: CallOverrides): Promise<BigNumber>;

  addWhitelist(
    wallets: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isManager(account: string, overrides?: CallOverrides): Promise<boolean>;

  setFeeTo(
    _feeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceManager(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setStep(
    _step: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setSaleDescription(
    _saleDescription: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    feeTo(overrides?: CallOverrides): Promise<string>;

    nftVoucher(overrides?: CallOverrides): Promise<string>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    setUsingWhitelist(
      _usingWhitelist: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    removeWhitelist(
      wallets: string[],
      overrides?: CallOverrides
    ): Promise<void>;

    addManager(account: string, overrides?: CallOverrides): Promise<void>;

    saleDescription(overrides?: CallOverrides): Promise<string>;

    setApmCoin(_apmCoin: string, overrides?: CallOverrides): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    usingWhitelist(overrides?: CallOverrides): Promise<boolean>;

    saleLimit(overrides?: CallOverrides): Promise<BigNumber>;

    apmPerNft(overrides?: CallOverrides): Promise<BigNumber>;

    saleName(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    isOwner(overrides?: CallOverrides): Promise<boolean>;

    buyLimitPerAddress(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saleCount(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyLimitPerAddress(
      wallets: string[],
      buyLimits: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleName(_saleName: string, overrides?: CallOverrides): Promise<void>;

    buyAndRedeem(
      _buyCount: BigNumberish,
      _apmAmount: BigNumberish,
      _userUuid: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftVoucher(
      _nftVoucher: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isWhitelist(wallet: string, overrides?: CallOverrides): Promise<boolean>;

    setTokenId(
      _tokenId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setApmPerNft(
      _apmPerNft: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    apmCoin(overrides?: CallOverrides): Promise<string>;

    buy(
      _buyCount: BigNumberish,
      _apmAmount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setSaleLimit(
      _saleLimit: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelist(wallets: string[], overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    isManager(account: string, overrides?: CallOverrides): Promise<boolean>;

    setFeeTo(_feeTo: string, overrides?: CallOverrides): Promise<void>;

    renounceManager(overrides?: CallOverrides): Promise<void>;

    setStep(_step: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSaleDescription(
      _saleDescription: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetApmCoin(address)"(
      apmCoinAddress?: string | null
    ): SetApmCoinEventFilter;
    SetApmCoin(apmCoinAddress?: string | null): SetApmCoinEventFilter;

    "SetNftVoucher(address)"(
      apmCoinAddress?: string | null
    ): SetNftVoucherEventFilter;
    SetNftVoucher(apmCoinAddress?: string | null): SetNftVoucherEventFilter;

    "SetFeeTo(address)"(feeTo?: string | null): SetFeeToEventFilter;
    SetFeeTo(feeTo?: string | null): SetFeeToEventFilter;

    "SetTokenId(uint256)"(tokenId?: null): SetTokenIdEventFilter;
    SetTokenId(tokenId?: null): SetTokenIdEventFilter;

    "SetApmPerNft(uint256)"(apmPerNft?: null): SetApmPerNftEventFilter;
    SetApmPerNft(apmPerNft?: null): SetApmPerNftEventFilter;

    "SetStep(uint256)"(step?: null): SetStepEventFilter;
    SetStep(step?: null): SetStepEventFilter;

    "SetSaleLimit(uint256)"(step?: null): SetSaleLimitEventFilter;
    SetSaleLimit(step?: null): SetSaleLimitEventFilter;

    "SetSaleName(string)"(saleName?: null): SetSaleNameEventFilter;
    SetSaleName(saleName?: null): SetSaleNameEventFilter;

    "SetSaleDescription(string)"(
      saleDescription?: null
    ): SetSaleDescriptionEventFilter;
    SetSaleDescription(saleDescription?: null): SetSaleDescriptionEventFilter;

    "SetUsingWhitelist(bool)"(
      usingWhitelist?: null
    ): SetUsingWhitelistEventFilter;
    SetUsingWhitelist(usingWhitelist?: null): SetUsingWhitelistEventFilter;

    "ManagerAdded(address)"(account?: string | null): ManagerAddedEventFilter;
    ManagerAdded(account?: string | null): ManagerAddedEventFilter;

    "ManagerRemoved(address)"(
      account?: string | null
    ): ManagerRemovedEventFilter;
    ManagerRemoved(account?: string | null): ManagerRemovedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
  };

  estimateGas: {
    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    nftVoucher(overrides?: CallOverrides): Promise<BigNumber>;

    tokenId(overrides?: CallOverrides): Promise<BigNumber>;

    setUsingWhitelist(
      _usingWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeWhitelist(
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    saleDescription(overrides?: CallOverrides): Promise<BigNumber>;

    setApmCoin(
      _apmCoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    usingWhitelist(overrides?: CallOverrides): Promise<BigNumber>;

    saleLimit(overrides?: CallOverrides): Promise<BigNumber>;

    apmPerNft(overrides?: CallOverrides): Promise<BigNumber>;

    saleName(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    isOwner(overrides?: CallOverrides): Promise<BigNumber>;

    buyLimitPerAddress(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    saleCount(overrides?: CallOverrides): Promise<BigNumber>;

    setBuyLimitPerAddress(
      wallets: string[],
      buyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleName(
      _saleName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyAndRedeem(
      _buyCount: BigNumberish,
      _apmAmount: BigNumberish,
      _userUuid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setNftVoucher(
      _nftVoucher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isWhitelist(wallet: string, overrides?: CallOverrides): Promise<BigNumber>;

    setTokenId(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApmPerNft(
      _apmPerNft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    apmCoin(overrides?: CallOverrides): Promise<BigNumber>;

    buy(
      _buyCount: BigNumberish,
      _apmAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleLimit(
      _saleLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    step(overrides?: CallOverrides): Promise<BigNumber>;

    addWhitelist(
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isManager(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setSaleDescription(
      _saleDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nftVoucher(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setUsingWhitelist(
      _usingWhitelist: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeWhitelist(
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    addManager(
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    saleDescription(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setApmCoin(
      _apmCoin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    usingWhitelist(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleLimit(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    apmPerNft(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    saleName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buyLimitPerAddress(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    saleCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setBuyLimitPerAddress(
      wallets: string[],
      buyLimits: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleName(
      _saleName: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyAndRedeem(
      _buyCount: BigNumberish,
      _apmAmount: BigNumberish,
      _userUuid: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setNftVoucher(
      _nftVoucher: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isWhitelist(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setTokenId(
      _tokenId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApmPerNft(
      _apmPerNft: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    apmCoin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    buy(
      _buyCount: BigNumberish,
      _apmAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleLimit(
      _saleLimit: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    step(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addWhitelist(
      wallets: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isManager(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeTo(
      _feeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceManager(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setStep(
      _step: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setSaleDescription(
      _saleDescription: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
