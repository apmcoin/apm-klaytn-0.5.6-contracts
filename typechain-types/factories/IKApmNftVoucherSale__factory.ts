/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  IKApmNftVoucherSale,
  IKApmNftVoucherSaleInterface,
} from "../IKApmNftVoucherSale";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        name: "price",
        type: "uint256",
      },
    ],
    name: "SetApmKrwPrice",
    type: "event",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603580601d6000396000f3fe6080604052600080fdfea165627a7a72305820eff34e6fb079751a3714d8308b5c2c1a1ce664bea408df12d3c9b6de452568550029";

type IKApmNftVoucherSaleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: IKApmNftVoucherSaleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class IKApmNftVoucherSale__factory extends ContractFactory {
  constructor(...args: IKApmNftVoucherSaleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<IKApmNftVoucherSale> {
    return super.deploy(overrides || {}) as Promise<IKApmNftVoucherSale>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): IKApmNftVoucherSale {
    return super.attach(address) as IKApmNftVoucherSale;
  }
  connect(signer: Signer): IKApmNftVoucherSale__factory {
    return super.connect(signer) as IKApmNftVoucherSale__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): IKApmNftVoucherSaleInterface {
    return new utils.Interface(_abi) as IKApmNftVoucherSaleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IKApmNftVoucherSale {
    return new Contract(address, _abi, signerOrProvider) as IKApmNftVoucherSale;
  }
}
