/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from "ethers";
import { EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IKApmNftVoucherLimitSaleInterface extends utils.Interface {
  functions: {};

  events: {
    "SetApmCoin(address)": EventFragment;
    "SetNftVoucher(address)": EventFragment;
    "SetFeeTo(address)": EventFragment;
    "SetTokenId(uint256)": EventFragment;
    "SetApmPerNft(uint256)": EventFragment;
    "SetStep(uint256)": EventFragment;
    "SetSaleLimit(uint256)": EventFragment;
    "SetSaleName(string)": EventFragment;
    "SetSaleDescription(string)": EventFragment;
    "SetUsingWhitelist(bool)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetApmCoin"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetNftVoucher"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFeeTo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetTokenId"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApmPerNft"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetStep"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSaleLimit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSaleName"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetSaleDescription"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetUsingWhitelist"): EventFragment;
}

export type SetApmCoinEvent = TypedEvent<[string], { apmCoinAddress: string }>;

export type SetApmCoinEventFilter = TypedEventFilter<SetApmCoinEvent>;

export type SetNftVoucherEvent = TypedEvent<
  [string],
  { apmCoinAddress: string }
>;

export type SetNftVoucherEventFilter = TypedEventFilter<SetNftVoucherEvent>;

export type SetFeeToEvent = TypedEvent<[string], { feeTo: string }>;

export type SetFeeToEventFilter = TypedEventFilter<SetFeeToEvent>;

export type SetTokenIdEvent = TypedEvent<[BigNumber], { tokenId: BigNumber }>;

export type SetTokenIdEventFilter = TypedEventFilter<SetTokenIdEvent>;

export type SetApmPerNftEvent = TypedEvent<
  [BigNumber],
  { apmPerNft: BigNumber }
>;

export type SetApmPerNftEventFilter = TypedEventFilter<SetApmPerNftEvent>;

export type SetStepEvent = TypedEvent<[BigNumber], { step: BigNumber }>;

export type SetStepEventFilter = TypedEventFilter<SetStepEvent>;

export type SetSaleLimitEvent = TypedEvent<[BigNumber], { step: BigNumber }>;

export type SetSaleLimitEventFilter = TypedEventFilter<SetSaleLimitEvent>;

export type SetSaleNameEvent = TypedEvent<[string], { saleName: string }>;

export type SetSaleNameEventFilter = TypedEventFilter<SetSaleNameEvent>;

export type SetSaleDescriptionEvent = TypedEvent<
  [string],
  { saleDescription: string }
>;

export type SetSaleDescriptionEventFilter =
  TypedEventFilter<SetSaleDescriptionEvent>;

export type SetUsingWhitelistEvent = TypedEvent<
  [boolean],
  { usingWhitelist: boolean }
>;

export type SetUsingWhitelistEventFilter =
  TypedEventFilter<SetUsingWhitelistEvent>;

export interface IKApmNftVoucherLimitSale extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IKApmNftVoucherLimitSaleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "SetApmCoin(address)"(
      apmCoinAddress?: string | null
    ): SetApmCoinEventFilter;
    SetApmCoin(apmCoinAddress?: string | null): SetApmCoinEventFilter;

    "SetNftVoucher(address)"(
      apmCoinAddress?: string | null
    ): SetNftVoucherEventFilter;
    SetNftVoucher(apmCoinAddress?: string | null): SetNftVoucherEventFilter;

    "SetFeeTo(address)"(feeTo?: string | null): SetFeeToEventFilter;
    SetFeeTo(feeTo?: string | null): SetFeeToEventFilter;

    "SetTokenId(uint256)"(tokenId?: null): SetTokenIdEventFilter;
    SetTokenId(tokenId?: null): SetTokenIdEventFilter;

    "SetApmPerNft(uint256)"(apmPerNft?: null): SetApmPerNftEventFilter;
    SetApmPerNft(apmPerNft?: null): SetApmPerNftEventFilter;

    "SetStep(uint256)"(step?: null): SetStepEventFilter;
    SetStep(step?: null): SetStepEventFilter;

    "SetSaleLimit(uint256)"(step?: null): SetSaleLimitEventFilter;
    SetSaleLimit(step?: null): SetSaleLimitEventFilter;

    "SetSaleName(string)"(saleName?: null): SetSaleNameEventFilter;
    SetSaleName(saleName?: null): SetSaleNameEventFilter;

    "SetSaleDescription(string)"(
      saleDescription?: null
    ): SetSaleDescriptionEventFilter;
    SetSaleDescription(saleDescription?: null): SetSaleDescriptionEventFilter;

    "SetUsingWhitelist(bool)"(
      usingWhitelist?: null
    ): SetUsingWhitelistEventFilter;
    SetUsingWhitelist(usingWhitelist?: null): SetUsingWhitelistEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
